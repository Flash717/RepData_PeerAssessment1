install.packages("kernlab")
install.packages("knitr")
library(latice)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each =50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x, f, layout = c(2, 1))
library(lattice)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each =50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x, f, layout = c(2, 1))
library(lattice)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each =50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = manufacturer)
qplot(displ, hwy, data = mpg, color = class)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
str(maacs)
qplot(log(hwy), data = mpg)
qplot(hwy, data = mpg)
qplot(log(hwy), data = mpg)
load("C:/Users/10131433/Dropbox/eLearning/Data Science/4 Exploratory Data Analysis/Lectures/exploratoryData-master/maacs.rda")
library(ggplot2)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col = drv)
qplot(displ, hwy, data=mpg, facets = drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=drv~.)
str(maacs)
qlog(log(eno), data = maacs)
qplot(log(eno), data = maacs)
qplot(log(eno), data = maacs, fill = mopos)
qplot(log(eno), data = maacs, facets = .~mopos)
qplot(log(eno), data = maacs, geom = "density")
qplot(log(eno), data = maacs, geom = "density", color = mopos)
qplot(log(pm25), log(eno), data=maacs)
qplot(log(pm25), log(eno), data=maacs, color=mopos)
qplot(log(pm25), log(eno), data=maacs, shape=mopos)
qplot(log(pm25), log(eno), data=maacs, shape=mopos, color=mopos)
qplot(log(pm25), log(eno), data=maacs, color=mopos, geom=c("point", "smooth"))
qplot(log(pm25), log(eno), data=maacs, color=mopos, geom=c("point", "smooth"), method="lm")
g <- ggplot(maacs, aes(logpm25, NocturnalSympt))
summary(g)
g + geom_point()
head(maacs)
maacs$logpm25 <- log(maacs$pm25)
head(maacs)
g <- ggplot(maacs, aes(pm25, mopos))
g + geom_point()
g + geom_lines()
g + geom_boxplot()
qplot(log(pm25), log(eno), data=maacs, color=mopos, geom=c("point", "smooth"), method="lm", title="Test")
testdat <- data.frame(x = 1:100, y=rnorm(100))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type="l")
plot(testdat$x, testdat$y, type="l", ylim = c(-1, 3))
plot(testdat$x, testdat$y, type="l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
?hclust
install.packages("ggplot2")
install.packages("MASS")
install.packages('forecast')
x <- c(1700,2100,1900,1300,1600,2200);
y <- c(51000,63000,57000,39000,48000,66000);
plot(x, y)
abline(x~y)
plot(x, y, xlim=c(0,2200), ylim=c(0, 66000))
abline(x~y)
y <- c(53000,65000,59000,41000,50000,68000)
plot(x, y, xlim=c(0,2200), ylim=c(0, 66000))
plot(x, y, xlim=c(0,max(x)), ylim=c(0, max(y)))
?abline
lm
?lm
y <- c(53000,65000,59000,41000,50000,68000)
plot(x, y, xlim=c(0,max(x)), ylim=c(0, max(y)))
lm(x, y)
lm(x ~ y)
lm(y ~ x)
abline(lm(y ~ x))
abline(y ~ x))
abline(y ~ x)
plot(x, y, xlim=c(0,max(x)), ylim=c(0, max(y)))
abline(y ~ x)
abline(lm(y ~ x))
abline(lm(y ~ x), col="blue")
y <- c(53000,44000,59000,82000,50000,68000)
plot(x, y, xlim=c(0,max(x)), ylim=c(0, max(y)))
abline(lm(y ~ x), col="blue")
x <- c(1300, 1400, 1600, 1900, 2100, 2300);
y <- c(88000, 72000, 94000, 86000, 112000, 98000);
plot(x, y, xlim=c(0,max(x)), ylim=c(0, max(y)))
abline(lm(y ~ x), col="blue")
lm(y ~ x)
2200*22.61+51731.09
barplot(x, y)
library(ggplot2);
ggplot(aes(x, y)) + geom_point()
ggplot(aes(x~y)) + geom_point()
?ggplot
ggplot(data.frame(x,y)) + geom_point()
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ",mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62,74, step = 0.5))
data(galton)
install.packages("HistData")
data(galton)
library(HistData)
data(galton)
data(Galton)
Galton
galton <- Galton
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ",mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62,74, step = 0.5))
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(1,2))
hist(galton$child, col="blue", breaks=100)
hist(galton$parent, col="blue", breaks=100)
mean(galton$child)
mean(galton$parent)
plot(galton$parent, galton$child, pch=19)
plot(galton$parent, galton$child, pch=19, col="blue")
par(nfrow=c(1,1))
par(mfrow=c(1,1))
plot(galton$parent, galton$child, pch=19, col="blue")
abline(lm(galton$parent~galton$child))
abline(mean(parent), data=galton)
abline(formula = mean(parent), data=galton)
abline(formula = mean(parent), data = galton)
?I
fit <- lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data = galton)
fit
abline(fit)
library(ggplot2)
qplot(parent~child, data=galton)
qplot(parent ~ child, data=galton)
qplot(parent, child, data=galton)
ggplot(aes = aes(x=parent, y=child, data=galton)) + geom_dotplot()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
plot(x,w)
mean(x~w)
lm(x~w)
cor(x, w)
?cor
cor(w ~x)
cor(x, w)
sum(w*(x-0.3)^2)
sum(w*(x- 1)^2)
sum(w*(x- 0.14)^2)
sum(w*(x- 0.0025)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x, y)
lm(x~y)
abline(lm(x~y))
data(mtcars)
plot(mpg, weight, data=mtcars)
plot(mtcars$mpg, mtcars$weight)
lm(mtcars$mpg ~ mtcars$weight)
plot(mtcars$mpg, mtcars$wt)
?mtcars
lm(mtcars$mpg ~ mtcars$wt)
?cor
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
?normalize
scale(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x,y)
lm(x~y)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
?mean
?scale
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
install.packages("swirl")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
plot(x)
plot(x,x)
mean(x)
install.packages("manipulate")
library(manipulate)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(rCharts)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(swirl)
swirl()
quit()
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("carot")
install.packages("caret")
swirl()
plot(child ~ parent, galton)
plot(jitter(child) ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm (child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
quit()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$CompressiveStrength ~ rownum(training))
qplot(training$CompressiveStrength ~ nrow(training))
qplot(nrow(training) ~ training$CompressiveStrength)
qplot(nrow(training), training$CompressiveStrength)
qplot(training$CompressiveStrength, nrow(training))
qplot(training$CompressiveStrength
)
summary(training)
head(training)
str(training)
ln(0)
log(0)
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh","Water", "Superplasticizer","CoarseAggregate","FineAggregate","Age")], y=training$CompressiveStrength, plot="pairs")
qplot(x=nrow(training), y=training$CompressiveStrength)
qplot(x=row(training), y=training$CompressiveStrength)
?row
row(training[3,])
row(training[,3])
row(training$CompressiveStrength)
as.numeric(rownames(training))
qplot(x=as.numeric(rownames(training)), y=training$CompressiveStrength)
qplot(x=as.numeric(rownames(training)), y=training$CompressiveStrength, colors=FlyAsh, data=training)
qplot(x=as.numeric(rownames(training)), y=training$CompressiveStrength, colors=training$FlyAsh)
qplot(x=as.numeric(rownames(training)), y=training$CompressiveStrength, colours=training$FlyAsh)
str(training)
summary(training)
cutFlyAsh <- cut2(training$FlyAsh, g=4)
install.packages("Hmisc")
library(Hmisc)
cutFlyAsh <- cut2(training$FlyAsh, g=4)
qplot(x=as.numeric(rownames(training)), y=training$CompressiveStrength, colours=cutFlyAsh)
table(cutFlyAsh)
qplot(x=as.numeric(rownames(training)), y=CompressiveStrength, colours=cutFlyAsh, data=training)
qplot(x=as.numeric(rownames(training)), y=CompressiveStrength, colour=cutFlyAsh, data=training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
library(earth)
data(etitanic)
head(model.matrix(survived ~ ., data = etitanic))
install.packages("earth")
library(earth)
data(etitanic)
head(model.matrix(survived ~ ., data = etitanic))
dummies <- dummyVars(survived ~ ., data = etitanic)
head(predict(dummies, newdata = etitanic))
library("caret", lib.loc="C:/Program Files/R/R-3.1.0/library")
dummies <- dummyVars(survived ~ ., data = etitanic)
head(predict(dummies, newdata = etitanic))
head(etitanic)
?predict
setwd("~/Development/git/RepData_PeerAssessment1")
